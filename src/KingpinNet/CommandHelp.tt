<#@ template language="C#" #> 
<#@ template visibility="internal" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
usage: <#if (!string.IsNullOrEmpty(Application.Name)) { Write(Application.Name + " "); }#><#=Command.Item.Name#> <# if (Command.Item.Flags.Count > 0) { #>[<flags>] <# } if (Command.Item.Commands.Count > 0) { #><command> <# } if (Command.Item.Arguments.Count > 1) { #>[<args> ...] <# } else if (Command.Item.Arguments.Count == 1) { #>[<<#= Command.Item.Arguments[0].Item.Name #>>]<# } #>


<#= Command.Item.Help ?? ""#>

<# if (Command.Item.Flags != null) {
    var flags = Command.Item.Flags.Where(x => !x.Item.IsHidden).ToList();

    if (flags.Count != 0) {
        var maxFlagLength = flags.Max(x => x.Item.Name.Length + x.Item.DefaultValue.Length) + 9;#>
Flags:
<#      foreach (var flag in flags) 
        {
            var defaultValue = "";
            if (!string.IsNullOrWhiteSpace(flag.Item.DefaultValue))
                defaultValue = "=" + flag.Item.DefaultValue;

            if (!string.IsNullOrWhiteSpace(flag.Item.ValueName))
                defaultValue = "=" + flag.Item.ValueName;

            if (flag.Item.ShortName != 0) { #>
  -<#=flag.Item.ShortName#>, --<#=flag.Item.Name#><#=defaultValue#>   <#=flag.Item.Help#> <#=GenerateExamples(flag.Item.Examples)#>
<#          }
            else { #>
      --<#= flag.Item.Name#><#=defaultValue#>   <#=flag.Item.Help#> <#=GenerateExamples(flag.Item.Examples)#>
<#          }
        }
    }
}#>
<#if (Command.Item.Arguments != null && Command.Item.Arguments.Count != 0) { #>
Args:
<#
    var Arguments = new List<string>();
    var maxArgLength = Command.Item.Arguments.Max(x => x.Item.Name.Length) + 9;

    foreach (var arg in Command.Item.Arguments)
    {
        int spacing = maxArgLength - arg.Item.Name.Length;
        string finalString = $"  [<{arg.Item.Name}>]".PadRight(spacing); #>
<#=finalString#>   <#=arg.Item.Help#> <#=GenerateExamples(arg.Item.Examples)#>
<#  }
}#>
<#if (Command.Item.Commands != null && Command.Item.Commands.Count != 0) { #>
Commands:
<#
    var finalCommands = new List<Tuple<string, CommandLineItem>>();
    RecurseCommands("", Command.Item.Commands, finalCommands);

    var commandNameLength = finalCommands.Max(c => c.Item1.Length);

    foreach (var command in finalCommands)
    {#>
  <#=command.Item1#> <#=CommandUsage(command.Item2)#>
    <#=command.Item2.Help#> <#GenerateExamples(command.Item2.Examples);#>

<#  }#>

<#}#>
